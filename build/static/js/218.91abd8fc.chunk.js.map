{"version":3,"file":"static/js/218.91abd8fc.chunk.js","mappings":"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","sources":["../node_modules/phosphor-react/src/icons/Lock.tsx","../node_modules/phosphor-react/src/icons/Key.tsx","../node_modules/phosphor-react/src/icons/PencilCircle.tsx","../node_modules/phosphor-react/src/icons/Note.tsx","../node_modules/phosphor-react/src/icons/Keyboard.tsx","../node_modules/phosphor-react/src/icons/Info.tsx","sections/settings/Shortcuts.js","pages/dashboard/Settings.js"],"sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"88\"\n      width=\"176\"\n      height=\"128\"\n      rx=\"8\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <path\n      d=\"M92,88V52a36,36,0,0,1,72,0V88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <circle cx=\"128\" cy=\"152\" r=\"16\" />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <rect x=\"40\" y=\"88\" width=\"176\" height=\"128\" rx=\"8\" opacity=\"0.2\" />\n    <rect\n      x=\"40\"\n      y=\"88\"\n      width=\"176\"\n      height=\"128\"\n      rx=\"8\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path\n      d=\"M92,88V52a36,36,0,0,1,72,0V88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <circle cx=\"128\" cy=\"152\" r=\"12\" />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M208,80H172V52a44,44,0,0,0-88,0V80H48A16,16,0,0,0,32,96V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V96A16,16,0,0,0,208,80Zm-80,84a12,12,0,1,1,12-12A12,12,0,0,1,128,164Zm28-84H100V52a28,28,0,0,1,56,0Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"88\"\n      width=\"176\"\n      height=\"128\"\n      rx=\"8\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <path\n      d=\"M92,88V52a36,36,0,0,1,72,0V88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <circle cx=\"128\" cy=\"152\" r=\"10\" />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"88\"\n      width=\"176\"\n      height=\"128\"\n      rx=\"8\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <path\n      d=\"M92,88V52a36,36,0,0,1,72,0V88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <circle cx=\"128\" cy=\"152\" r=\"8\" />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"88\"\n      width=\"176\"\n      height=\"128\"\n      rx=\"8\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path\n      d=\"M92,88V52a36,36,0,0,1,72,0V88\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <circle cx=\"128\" cy=\"152\" r=\"12\" />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst Lock = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nLock.displayName = \"Lock\";\n\nexport default Lock;\n","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <path\n      d=\"M93.2,122.8A70.3,70.3,0,0,1,88,96a72,72,0,1,1,72,72,70.3,70.3,0,0,1-26.8-5.2h0L120,176H96v24H72v24H32V184l61.2-61.2Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <circle cx=\"180\" cy=\"76\" r=\"16\" />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <path\n      d=\"M93.2,122.8A70.3,70.3,0,0,1,88,96a72,72,0,1,1,72,72,70.3,70.3,0,0,1-26.8-5.2h0L120,176H96v24H72v24H32V184l61.2-61.2Z\"\n      opacity=\"0.2\"\n    />\n    <path\n      d=\"M93.2,122.8A70.3,70.3,0,0,1,88,96a72,72,0,1,1,72,72,70.3,70.3,0,0,1-26.8-5.2h0L120,176H96v24H72v24H32V184l61.2-61.2Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <circle cx=\"180\" cy=\"76\" r=\"12\" />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M160,16A80.1,80.1,0,0,0,83.9,120.8L26.3,178.3A8.1,8.1,0,0,0,24,184v40a8,8,0,0,0,8,8H72a8,8,0,0,0,8-8V208H96a8,8,0,0,0,8-8V184h16a8.1,8.1,0,0,0,5.7-2.3l9.5-9.6A80,80,0,1,0,160,16Zm20,76a16,16,0,1,1,16-16A16,16,0,0,1,180,92Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <path\n      d=\"M93.2,122.8A70.3,70.3,0,0,1,88,96a72,72,0,1,1,72,72,70.3,70.3,0,0,1-26.8-5.2h0L120,176H96v24H72v24H32V184l61.2-61.2Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <circle cx=\"180\" cy=\"76\" r=\"10\" />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <path\n      d=\"M93.2,122.8A70.3,70.3,0,0,1,88,96a72,72,0,1,1,72,72,70.3,70.3,0,0,1-26.8-5.2h0L120,176H96v24H72v24H32V184l61.2-61.2Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <circle cx=\"180\" cy=\"76\" r=\"8\" />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <path\n      d=\"M93.2,122.8A70.3,70.3,0,0,1,88,96a72,72,0,1,1,72,72,70.3,70.3,0,0,1-26.8-5.2h0L120,176H96v24H72v24H32V184l61.2-61.2Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <circle cx=\"180\" cy=\"76\" r=\"12\" />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst Key = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nKey.displayName = \"Key\";\n\nexport default Key;\n","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <circle\n      cx=\"128\"\n      cy=\"128\"\n      r=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <polyline\n      points=\"176 211.2 176 176 128 72 80 176 80 211.2\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <path\n      d=\"M128,200a24,24,0,0,1,48,0\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <path\n      d=\"M128,224V200a24,24,0,0,0-48,0\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"98.5\"\n      y1=\"136\"\n      x2=\"157.5\"\n      y2=\"136\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <path\n      d=\"M80,211.2a96,96,0,1,1,96,0h0V176L128,72,80,176v35.2Z\"\n      opacity=\"0.2\"\n    />\n    <circle\n      cx=\"128\"\n      cy=\"128\"\n      r=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"176 211.2 176 176 128 72 80 176 80 211.2\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path\n      d=\"M128,192a24,24,0,0,1,48,0\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path\n      d=\"M128,224V192a24,24,0,0,0-48,0\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"102.2\"\n      y1=\"128\"\n      x2=\"153.8\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M201.5,54.5a103.8,103.8,0,0,0-147,0,103.8,103.8,0,0,0,0,147,103.8,103.8,0,0,0,147,0,103.8,103.8,0,0,0,0-147ZM128,170.9a31.9,31.9,0,0,0-32.3-9.8L111,128h34l15.3,33.1a31.9,31.9,0,0,0-32.3,9.8Zm40,35.5a89,89,0,0,1-32,9.2V192a16,16,0,0,1,32,0Zm22.2-16.2c-2,2-4.1,3.9-6.2,5.7V176a9.8,9.8,0,0,0-.7-3.4l-48-104h-.1a4.1,4.1,0,0,0-.5-.9c0-.1,0-.1-.1-.2l-.5-.7H134a4.6,4.6,0,0,0-.7-.7h-.2l-.7-.6h-.2l-.8-.5h-.1l-.9-.3h-.3l-.9-.2h-2.4l-1,.2h-.2l-.8.3h-.2l-.9.4h-.1l-.7.6h-.2l-.7.7h-.1l-.5.7-.2.2a4.1,4.1,0,0,1-.5.9l-22.1,48h0L72.7,172.6A9.8,9.8,0,0,0,72,176v19.9c-2.1-1.8-4.2-3.7-6.2-5.7a88,88,0,1,1,124.4,0Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <circle\n      cx=\"128\"\n      cy=\"128\"\n      r=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <polyline\n      points=\"176 211.2 176 176 128 72 80 176 80 211.2\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <path\n      d=\"M128,192a24,24,0,0,1,48,0\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <path\n      d=\"M128,224V192a24,24,0,0,0-48,0\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"102.2\"\n      y1=\"128\"\n      x2=\"153.8\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <circle\n      cx=\"128\"\n      cy=\"128\"\n      r=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <polyline\n      points=\"176 211.2 176 176 128 72 80 176 80 211.2\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <path\n      d=\"M128,192a24,24,0,0,1,48,0\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <path\n      d=\"M128,224V192a24,24,0,0,0-48,0\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"102.2\"\n      y1=\"128\"\n      x2=\"153.8\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <circle\n      cx=\"128\"\n      cy=\"128\"\n      r=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"176 211.2 176 176 128 72 80 176 80 211.2\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path\n      d=\"M128,192a24,24,0,0,1,48,0\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path\n      d=\"M128,224V192a24,24,0,0,0-48,0\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"102.2\"\n      y1=\"128\"\n      x2=\"153.8\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst PencilCircle = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nPencilCircle.displayName = \"PencilCircle\";\n\nexport default PencilCircle;\n","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <line\n      x1=\"96\"\n      y1=\"108\"\n      x2=\"160\"\n      y2=\"108\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"148\"\n      x2=\"116\"\n      y2=\"148\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <path\n      d=\"M156.7,216H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208a8,8,0,0,1,8,8V156.7a7.9,7.9,0,0,1-2.3,5.6l-51.4,51.4A7.9,7.9,0,0,1,156.7,216Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <polyline\n      points=\"215.3 156 156 156 156 215.3\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <polygon points=\"216 160 160 160 160 216 216 160\" opacity=\"0.2\" />\n    <line\n      x1=\"96\"\n      y1=\"96\"\n      x2=\"160\"\n      y2=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"128\"\n      x2=\"160\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"160\"\n      x2=\"128\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path\n      d=\"M156.7,216H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208a8,8,0,0,1,8,8V156.7a7.9,7.9,0,0,1-2.3,5.6l-51.4,51.4A7.9,7.9,0,0,1,156.7,216Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"215.3 160 160 160 160 215.3\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H156.7a15.9,15.9,0,0,0,11.3-4.7L219.3,168a15.9,15.9,0,0,0,4.7-11.3V48A16,16,0,0,0,208,32ZM96,88h64a8,8,0,0,1,0,16H96a8,8,0,0,1,0-16Zm32,80H96a8,8,0,0,1,0-16h32a8,8,0,0,1,0,16ZM96,136a8,8,0,0,1,0-16h64a8,8,0,0,1,0,16Zm64,68.7V160h44.7Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <line\n      x1=\"96\"\n      y1=\"96\"\n      x2=\"160\"\n      y2=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"128\"\n      x2=\"160\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"160\"\n      x2=\"128\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <path\n      d=\"M156.7,216H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208a8,8,0,0,1,8,8V156.7a7.9,7.9,0,0,1-2.3,5.6l-51.4,51.4A7.9,7.9,0,0,1,156.7,216Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <polyline\n      points=\"215.3 160 160 160 160 215.3\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <line\n      x1=\"96\"\n      y1=\"96\"\n      x2=\"160\"\n      y2=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"128\"\n      x2=\"160\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"160\"\n      x2=\"128\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <path\n      d=\"M156.7,216H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208a8,8,0,0,1,8,8V156.7a7.9,7.9,0,0,1-2.3,5.6l-51.4,51.4A7.9,7.9,0,0,1,156.7,216Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <polyline\n      points=\"215.3 160 160 160 160 215.3\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <line\n      x1=\"96\"\n      y1=\"96\"\n      x2=\"160\"\n      y2=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"128\"\n      x2=\"160\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"160\"\n      x2=\"128\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path\n      d=\"M156.7,216H48a8,8,0,0,1-8-8V48a8,8,0,0,1,8-8H208a8,8,0,0,1,8,8V156.7a7.9,7.9,0,0,1-2.3,5.6l-51.4,51.4A7.9,7.9,0,0,1,156.7,216Z\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"215.3 160 160 160 160 215.3\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst Note = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nNote.displayName = \"Note\";\n\nexport default Note;\n","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <rect\n      x=\"24\"\n      y=\"56\"\n      width=\"208\"\n      height=\"144\"\n      rx=\"8.5\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"64\"\n      y1=\"128\"\n      x2=\"192\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"64\"\n      y1=\"92\"\n      x2=\"192\"\n      y2=\"92\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"64\"\n      y1=\"164\"\n      x2=\"72\"\n      y2=\"164\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"108\"\n      y1=\"164\"\n      x2=\"148\"\n      y2=\"164\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"184\"\n      y1=\"164\"\n      x2=\"192\"\n      y2=\"164\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <rect x=\"24\" y=\"56\" width=\"208\" height=\"144\" rx=\"8.5\" opacity=\"0.2\" />\n    <rect\n      x=\"24\"\n      y=\"56\"\n      width=\"208\"\n      height=\"144\"\n      rx=\"8.5\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16.97\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"128\"\n      x2=\"200\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"96\"\n      x2=\"200\"\n      y2=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"160\"\n      x2=\"64\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"160\"\n      x2=\"160\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"192\"\n      y1=\"160\"\n      x2=\"200\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M223.5,47.5H32.5a17,17,0,0,0-17,17v127a17,17,0,0,0,17,17h191a17,17,0,0,0,17-17V64.5A17,17,0,0,0,223.5,47.5ZM64,168H56a8,8,0,0,1,0-16h8a8,8,0,0,1,0,16Zm96,0H96a8,8,0,0,1,0-16h64a8,8,0,0,1,0,16Zm40,0h-8a8,8,0,0,1,0-16h8a8,8,0,0,1,0,16Zm0-32H56a8,8,0,0,1,0-16H200a8,8,0,0,1,0,16Zm0-32H56a8,8,0,0,1,0-16H200a8,8,0,0,1,0,16Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <rect\n      x=\"24\"\n      y=\"56\"\n      width=\"208\"\n      height=\"144\"\n      rx=\"8.5\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"128\"\n      x2=\"200\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"96\"\n      x2=\"200\"\n      y2=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"160\"\n      x2=\"64\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"160\"\n      x2=\"160\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"192\"\n      y1=\"160\"\n      x2=\"200\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <rect\n      x=\"24\"\n      y=\"56\"\n      width=\"208\"\n      height=\"144\"\n      rx=\"8.5\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"128\"\n      x2=\"200\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"96\"\n      x2=\"200\"\n      y2=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"160\"\n      x2=\"64\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"160\"\n      x2=\"160\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"192\"\n      y1=\"160\"\n      x2=\"200\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <rect\n      x=\"24\"\n      y=\"56\"\n      width=\"208\"\n      height=\"144\"\n      rx=\"8.5\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16.97\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"128\"\n      x2=\"200\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"96\"\n      x2=\"200\"\n      y2=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"56\"\n      y1=\"160\"\n      x2=\"64\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"96\"\n      y1=\"160\"\n      x2=\"160\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"192\"\n      y1=\"160\"\n      x2=\"200\"\n      y2=\"160\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst Keyboard = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nKeyboard.displayName = \"Keyboard\";\n\nexport default Keyboard;\n","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <circle\n      cx=\"128\"\n      cy=\"128\"\n      r=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <polyline\n      points=\"120 124 128 124 128 176 136 176\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <circle cx=\"126\" cy=\"84\" r=\"16\" />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <circle cx=\"128\" cy=\"128\" r=\"96\" opacity=\"0.2\" />\n    <circle\n      cx=\"128\"\n      cy=\"128\"\n      r=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"120 120 128 120 128 176 136 176\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <circle cx=\"126\" cy=\"84\" r=\"12\" />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M128,24A104,104,0,1,0,232,128,104.2,104.2,0,0,0,128,24Zm-2,48a12,12,0,1,1-12,12A12,12,0,0,1,126,72Zm10,112h-8a8,8,0,0,1-8-8V128a8,8,0,0,1,0-16h8a8,8,0,0,1,8,8v48a8,8,0,0,1,0,16Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <circle\n      cx=\"128\"\n      cy=\"128\"\n      r=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <polyline\n      points=\"120 120 128 120 128 176 136 176\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <circle cx=\"126\" cy=\"84\" r=\"10\" />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <circle\n      cx=\"128\"\n      cy=\"128\"\n      r=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <polyline\n      points=\"120 120 128 120 128 176 136 176\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <circle cx=\"126\" cy=\"84\" r=\"8\" />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <circle\n      cx=\"128\"\n      cy=\"128\"\n      r=\"96\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <polyline\n      points=\"120 120 128 120 128 176 136 176\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <circle cx=\"126\" cy=\"84\" r=\"12\" />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst Info = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nInfo.displayName = \"Info\";\n\nexport default Info;\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  Slide,\n  Stack,\n  Typography,\n} from \"@mui/material\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst list = [\n  {\n    key: 0,\n    title: \"Mark as unread\",\n    combination: [\"Cmd\", \"Shift\", \"U\"],\n  },\n  {\n    key: 1,\n    title: \"Mute\",\n    combination: [\"Cmd\", \"Shift\", \"M\"],\n  },\n  {\n    key: 2,\n    title: \"Archive Chat\",\n    combination: [\"Cmd\", \"Shift\", \"E\"],\n  },\n  {\n    key: 3,\n    title: \"Delete Chat\",\n    combination: [\"Cmd\", \"Shift\", \"D\"],\n  },\n  {\n    key: 4,\n    title: \"Pin Chat\",\n    combination: [\"Cmd\", \"Shift\", \"P\"],\n  },\n  {\n    key: 5,\n    title: \"Search\",\n    combination: [\"Cmd\", \"F\"],\n  },\n  {\n    key: 6,\n    title: \"Search Chat\",\n    combination: [\"Cmd\", \"Shift\", \"F\"],\n  },\n  {\n    key: 7,\n    title: \"Next Chat\",\n    combination: [\"Cmd\", \"N\"],\n  },\n  {\n    key: 8,\n    title: \"Next Step\",\n    combination: [\"Ctrl\", \"Tab\"],\n  },\n  {\n    key: 9,\n    title: \"Previous Step\",\n    combination: [\"Ctrl\", \"Shift\", \"Tab\"],\n  },\n  {\n    key: 10,\n    title: \"New Group\",\n    combination: [\"Cmd\", \"Shift\", \"N\"],\n  },\n  {\n    key: 11,\n    title: \"Profile & About\",\n    combination: [\"Cmd\", \"P\"],\n  },\n  {\n    key: 12,\n    title: \"Increase speed of voice message\",\n    combination: [\"Shift\", \".\"],\n  },\n  {\n    key: 13,\n    title: \"Decrease speed of voice message\",\n    combination: [\"Shift\", \",\"],\n  },\n  {\n    key: 14,\n    title: \"Settings\",\n    combination: [\"Shift\", \"S\"],\n  },\n  {\n    key: 15,\n    title: \"Emoji Panel\",\n    combination: [\"Cmd\", \"E\"],\n  },\n  {\n    key: 16,\n    title: \"Sticker Panel\",\n    combination: [\"Cmd\", \"S\"],\n  },\n];\n\nconst Shortcuts = ({ open, handleClose }) => {\n  return (\n    <>\n      <Dialog\n        fullWidth\n        maxWidth=\"md\"\n        open={open}\n        onClose={handleClose}\n        keepMounted\n        TransitionComponent={Transition}\n        sx={{ p: 4 }}>\n        <DialogTitle>Keyboard Shortcuts</DialogTitle>\n        <DialogContent sx={{ mt: 4 }}>\n          <Grid container spacing={3}>\n            {list.map(({ key, title, combination }) => (\n              <Grid item xs={6} key={key} container>\n                <Stack\n                  sx={{ width: \"100%\" }}\n                  justifyContent=\"space-between\"\n                  spacing={3}\n                  direction=\"row\"\n                  alignItems=\"center\">\n                  <Typography variant=\"caption\" sx={{ fontSize: 14 }}>\n                    {title}\n                  </Typography>\n                  <Stack spacing={2} direction=\"row\">\n                    {combination.map((el) => {\n                      return (\n                        <Button\n                          disabled\n                          variant=\"contained\"\n                          sx={{ color: \"#212121\" }}>\n                          {el}\n                        </Button>\n                      );\n                    })}\n                  </Stack>\n                </Stack>\n              </Grid>\n            ))}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button variant=\"contained\" onClick={handleClose}>\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default Shortcuts;\n","import React, { useState } from \"react\";\nimport { faker } from \"@faker-js/faker\";\nimport {\n  Stack,\n  Box,\n  useTheme,\n  IconButton,\n  Typography,\n  Avatar,\n  Divider,\n} from \"@mui/material\";\nimport {\n  CaretLeft,\n  Bell,\n  Lock,\n  Key,\n  PencilCircle,\n  Image,\n  Note,\n  Keyboard,\n  Info,\n} from \"phosphor-react\";\nimport Shortcuts from \"../../sections/settings/Shortcuts\";\n\nconst Settings = () => {\n  const theme = useTheme();\n\n  const [openShortcuts, setOpenShortcuts] = useState(false);\n\n  const handleOpenShortcuts = () => {\n    setOpenShortcuts(true);\n  };\n\n  const handleCloseShortcuts = () => {\n    setOpenShortcuts(false);\n  };\n\n  const list = [\n    {\n      key: 0,\n      icon: <Bell size={20} />,\n      title: \"Notifications\",\n      onclick: () => {},\n    },\n    {\n      key: 1,\n      icon: <Lock size={20} />,\n      title: \"Privacy\",\n      onclick: () => {},\n    },\n    {\n      key: 2,\n      icon: <Key size={20} />,\n      title: \"Security\",\n      onclick: () => {},\n    },\n    {\n      key: 3,\n      icon: <PencilCircle size={20} />,\n      title: \"Theme\",\n      //onclick: handleOpenTheme,\n      onclick: () => {},\n    },\n    {\n      key: 4,\n      icon: <Image size={20} />,\n      title: \"Chat Wallpaper\",\n      onclick: () => {},\n    },\n    {\n      key: 5,\n      icon: <Note size={20} />,\n      title: \"Request Account Info\",\n      onclick: () => {},\n    },\n    {\n      key: 6,\n      icon: <Keyboard size={20} />,\n      title: \"Keyboard Shortcuts\",\n      onclick: handleOpenShortcuts,\n    },\n    {\n      key: 7,\n      icon: <Info size={20} />,\n      title: \"Help\",\n      onclick: () => {},\n    },\n  ];\n\n  return (\n    <>\n      <Stack direction=\"row\" sx={{ width: \"100%\" }}>\n        {/* Left Panel */}\n        <Box\n          sx={{\n            overflowY: \"scroll\",\n            height: \"100vh\",\n            width: 320,\n            backgroundColor:\n              theme.palette.mode === \"light\"\n                ? \"#F8FAFF\"\n                : theme.palette.background,\n            boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\n          }}>\n          <Stack p={4} spacing={5}>\n            {/* Header */}\n            <Stack direction=\"row\" alignItems=\"center\" spacing={3}>\n              <IconButton>\n                <CaretLeft size={24} color=\"#4B4B4B\" />\n              </IconButton>\n              <Typography variant=\"h6\">Settings</Typography>\n            </Stack>\n            {/* Profile */}\n            <Stack direction=\"row\" spacing={3}>\n              <Avatar\n                sx={{ width: 56, height: 56 }}\n                src={faker.image.avatar()}\n                alt={faker.name.firstName()}\n              />\n              <Stack spacing={0.5}>\n                <Typography variant=\"article\">\n                  {faker.name.firstName()}\n                </Typography>\n                <Typography variant=\"body2\">{faker.random.words()}</Typography>\n              </Stack>\n            </Stack>\n            {/* List of Options */}\n            <Stack spacing={4}>\n              {list.map(({ key, icon, title, onclick }) => (\n                <>\n                  <Stack\n                    spacing={2}\n                    sx={{ cursor: \"pointer\" }}\n                    onClick={onclick}>\n                    <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                      {icon}\n                      <Typography variant=\"body2\">{title}</Typography>\n                    </Stack>\n                    {key !== 7 && <Divider />}\n                  </Stack>\n                </>\n              ))}\n            </Stack>\n          </Stack>\n        </Box>\n        {/* Right Panel */}\n      </Stack>\n      {openShortcuts && (\n        <Shortcuts open={openShortcuts} handleClose={handleCloseShortcuts} />\n      )}\n    </>\n  );\n};\n\nexport default Settings;\n"],"names":["pathsByWeight","Map","set","color","React","x","y","width","height","rx","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","cx","cy","r","opacity","renderPath","weight","renderPathForWeight","Lock","forwardRef","props","ref","IconBase","Object","assign","displayName","Key","points","x1","y1","x2","y2","PencilCircle","Note","Keyboard","Info","Transition","_jsx","Slide","direction","list","key","title","combination","_ref","open","handleClose","_Fragment","children","_jsxs","Dialog","fullWidth","maxWidth","onClose","keepMounted","TransitionComponent","sx","p","DialogTitle","DialogContent","mt","Grid","container","spacing","map","_ref2","item","xs","Stack","justifyContent","alignItems","Typography","variant","fontSize","el","Button","disabled","DialogActions","onClick","Settings","theme","useTheme","openShortcuts","setOpenShortcuts","useState","icon","Bell","size","onclick","Image","handleOpenShortcuts","Box","overflowY","backgroundColor","palette","mode","background","boxShadow","IconButton","CaretLeft","Avatar","src","faker","image","avatar","alt","name","firstName","random","words","cursor","Divider","Shortcuts","handleCloseShortcuts"],"sourceRoot":""}