{"version":3,"file":"static/js/969.86dfe951.chunk.js","mappings":"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","sources":["components/ChatElement.js","components/Search/Search.js","components/Search/SearchIconWrapper.js","components/Search/StyledInputBase.js","../node_modules/phosphor-react/src/icons/Plus.tsx","pages/dashboard/Group.js"],"sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  Stack,\n  Avatar,\n  Typography,\n  useTheme,\n  Badge,\n  styled,\n} from \"@mui/material\";\n\nconst StyledBadge = styled(Badge)(({ theme }) => ({\n  \"& .MuiBadge-badge\": {\n    backgroundColor: \"#44b700\",\n    color: \"#44b700\",\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    \"&::after\": {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      borderRadius: \"50%\",\n      animation: \"ripple 1.2s infinite ease-in-out\",\n      border: \"1px solid currentColor\",\n      content: '\"\"',\n    },\n  },\n  \"@keyframes ripple\": {\n    \"0%\": {\n      transform: \"scale(.8)\",\n      opacity: 1,\n    },\n    \"100%\": {\n      transform: \"scale(2.4)\",\n      opacity: 0,\n    },\n  },\n}));\n\nconst ChatElement = ({ id, name, img, msg, time, unread, online }) => {\n  const theme = useTheme();\n  return (\n    <Box\n      sx={{\n        width: \"100%\",\n        borderRadius: 1,\n        backgroundColor:\n          theme.palette.mode === \"light\"\n            ? \"#F0F4FA\"\n            : theme.palette.background.default,\n      }}\n      p={2}>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Stack direction=\"row\" spacing={2}>\n          {online ? (\n            <StyledBadge\n              overlap=\"circular\"\n              anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n              variant=\"dot\">\n              <Avatar src={img} />\n            </StyledBadge>\n          ) : (\n            <Avatar src={img} />\n          )}\n          <Stack spacing={0.3}>\n            <Typography variant=\"subtitle2\">{name}</Typography>\n            <Typography variant=\"caption\">{msg}</Typography>\n          </Stack>\n          <Stack spacing={2} alignItems={\"center\"}>\n            <Typography sx={{ fontWeight: 600 }} variant=\"caption\">\n              {time}\n            </Typography>\n            <Badge color=\"primary\" badgeContent={unread} />\n          </Stack>\n        </Stack>\n      </Stack>\n    </Box>\n  );\n};\n\nexport default ChatElement;\n","import { styled, alpha } from \"@mui/material/styles\";\n\nconst Search = styled(\"div\")(({ theme }) => ({\n  position: \"relative\",\n  borderRadius: 20,\n  backgroundColor: alpha(theme.palette.background.default, 1),\n  marginRight: theme.spacing(2),\n  marginLeft: 0,\n  width: \"100%\",\n}));\n\nexport default Search;\n","import { styled } from \"@mui/material/styles\";\n\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: \"100%\",\n  position: \"absolute\",\n  pointerEvents: \"none\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n}));\n\nexport default SearchIconWrapper;\n","import { InputBase } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n  color: \"inherit\",\n  \"& .MuiInputBase-input\": {\n    padding: theme.spacing(1, 1, 1, 0),\n    //vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    width: \"100%\",\n  },\n}));\n\nexport default StyledInputBase;\n","/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <line\n      x1=\"40\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"128\"\n      y1=\"40\"\n      x2=\"128\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <line\n      x1=\"40\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"128\"\n      y1=\"40\"\n      x2=\"128\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M216,120H136V40a8,8,0,0,0-16,0v80H40a8,8,0,0,0,0,16h80v80a8,8,0,0,0,16,0V136h80a8,8,0,0,0,0-16Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <line\n      x1=\"40\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"128\"\n      y1=\"40\"\n      x2=\"128\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <line\n      x1=\"40\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"128\"\n      y1=\"40\"\n      x2=\"128\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <line\n      x1=\"40\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"128\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"128\"\n      y1=\"40\"\n      x2=\"128\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst Plus = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nPlus.displayName = \"Plus\";\n\nexport default Plus;\n","import React from \"react\";\nimport {\n  Box,\n  Stack,\n  Typography,\n  Link,\n  IconButton,\n  useTheme,\n  Divider,\n} from \"@mui/material\";\nimport {\n  Search,\n  SearchIconWrapper,\n  StyledInputBase,\n} from \"../../components/Search\";\nimport { MagnifyingGlass, Plus } from \"phosphor-react\";\nimport { SimpleBarStyle } from \"../../components/Scrollbar\";\nimport { ChatList } from \"../../data\";\nimport ChatElement from \"../../components/ChatElement\";\n\nconst Group = () => {\n  const theme = useTheme();\n\n  return (\n    <>\n      <Stack direction=\"row\" sx={{ width: \"100%\" }}>\n        {/* Left */}\n        <Box\n          sx={{\n            height: \"100vh\",\n            backgroundColor: (theme) =>\n              theme.palette.mode === \"light\"\n                ? \"#F8FAFF\"\n                : theme.palette.background,\n            width: 320,\n            boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\n          }}>\n          <Stack p={3} spacing={2} sx={{ maxHeight: \"100vh\" }}>\n            <Stack>\n              <Typography variant=\"h5\">Groups</Typography>\n            </Stack>\n            <Stack sx={{ width: \"100%\" }}>\n              <Search>\n                <SearchIconWrapper>\n                  <MagnifyingGlass color=\"#709CE6\" />\n                </SearchIconWrapper>\n                <StyledInputBase\n                  placeholder=\"Search....\"\n                  inputProps={{ \"aria-label\": \"search\" }}\n                />\n              </Search>\n            </Stack>\n            <Stack\n              direction={\"row\"}\n              justifyContent={\"space-between\"}\n              alignItems={\"center\"}>\n              <Typography variant=\"subtitle2\" component={Link}>\n                Create New Group\n              </Typography>\n              <IconButton>\n                <Plus style={{ color: theme.palette.primary.main }} />\n              </IconButton>\n            </Stack>\n            <Divider />\n            <Stack sx={{ flexGrow: 1, overflowY: \"scroll\", height: \"100%\" }}>\n              <SimpleBarStyle timeout={500} clickOnTrack={false}>\n                <Stack spacing={2.5}>\n                  {/*  */}\n                  <Typography variant=\"subtitle2\" sx={{ color: \"#676667\" }}>\n                    Pinned\n                  </Typography>\n                  {/* Chat List */}\n                  {ChatList.filter((el) => el.pinned).map((el) => {\n                    return <ChatElement {...el} />;\n                  })}\n                  {/*  */}\n                  <Typography variant=\"subtitle2\" sx={{ color: \"#676667\" }}>\n                    All Groups\n                  </Typography>\n                  {/* Chat List */}\n                  {ChatList.filter((el) => !el.pinned).map((el) => {\n                    return <ChatElement {...el} />;\n                  })}\n                </Stack>\n              </SimpleBarStyle>\n            </Stack>\n          </Stack>\n        </Box>\n        {/* Right */}\n        {/* // TODO => Reuse Conversation Commponent */}\n      </Stack>\n    </>\n  );\n};\n\nexport default Group;\n"],"names":["StyledBadge","styled","Badge","_ref","theme","backgroundColor","color","boxShadow","concat","palette","background","paper","position","top","left","width","height","borderRadius","animation","border","content","transform","opacity","_ref2","id","name","img","msg","time","unread","online","useTheme","_jsx","Box","sx","mode","default","p","children","Stack","direction","alignItems","justifyContent","_jsxs","spacing","overlap","anchorOrigin","vertical","horizontal","variant","Avatar","src","Typography","fontWeight","badgeContent","alpha","marginRight","marginLeft","padding","pointerEvents","display","InputBase","paddingLeft","pathsByWeight","Map","set","React","x1","y1","x2","y2","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","renderPath","weight","renderPathForWeight","Plus","forwardRef","props","ref","IconBase","Object","assign","displayName","Group","_Fragment","maxHeight","Search","SearchIconWrapper","MagnifyingGlass","StyledInputBase","placeholder","inputProps","component","Link","IconButton","style","primary","main","Divider","flexGrow","overflowY","SimpleBarStyle","timeout","clickOnTrack","ChatList","filter","el","pinned","map","ChatElement"],"sourceRoot":""}